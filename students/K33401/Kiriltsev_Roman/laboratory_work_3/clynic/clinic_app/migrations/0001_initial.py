# Generated by Django 3.1.7 on 2021-03-17 13:28

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('fio', models.CharField(max_length=60, verbose_name='ФИО')),
                ('speciality', models.CharField(max_length=30, verbose_name='Специальность')),
                ('education', models.CharField(choices=[('VSH', 'Высшее'), ('VSN', 'Высшее неоконченное'), ('SRD', 'Среднее'), ('SRS', 'Среднее специальное')], max_length=3, verbose_name='Уровень образования')),
                ('birthdate', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('work_years', models.IntegerField(verbose_name='Трудовой стаж')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Cabinet',
            fields=[
                ('number', models.IntegerField(primary_key=True, serialize=False, unique=True, verbose_name='Номер кабинета')),
                ('owner', models.CharField(max_length=50, verbose_name='Ответственный')),
                ('phone', models.CharField(max_length=12, verbose_name='Номер телефона')),
            ],
        ),
        migrations.CreateModel(
            name='Diagnosis',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=50, verbose_name='Название диагноза')),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('fio', models.CharField(max_length=60, verbose_name='ФИО пациента')),
                ('birthdate', models.DateField(verbose_name='Дата рождения')),
                ('phone', models.CharField(max_length=12, verbose_name='Номер телефона')),
                ('passport', models.CharField(max_length=10, verbose_name='Паспортные данные')),
            ],
        ),
        migrations.CreateModel(
            name='Price',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=50, verbose_name='Название услуги')),
                ('price', models.IntegerField(verbose_name='Стоимость (в рублях)')),
            ],
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('start_time', models.TimeField(verbose_name='Время начала')),
                ('end_time', models.TimeField(verbose_name='Время конца')),
                ('day', models.CharField(max_length=60, verbose_name='День недели')),
                ('id_doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Врач')),
                ('number_cabinet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic_app.cabinet', verbose_name='Номер кабинета')),
            ],
        ),
        migrations.CreateModel(
            name='Meeting',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('date_meet', models.DateField(verbose_name='Дата приёма')),
                ('time_meet', models.TimeField(verbose_name='Время приёма')),
                ('status', models.CharField(max_length=50, verbose_name='Текущее состояние')),
                ('price_status', models.BooleanField(default=False, verbose_name='Оплачено')),
                ('id_doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Врач')),
                ('id_patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic_app.patient', verbose_name='Пациент')),
                ('id_price', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic_app.price', verbose_name='Услуга')),
            ],
        ),
        migrations.CreateModel(
            name='Medcard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(verbose_name='Дата установки диагноза')),
                ('status', models.CharField(max_length=60, verbose_name='Статус заболевания')),
                ('id_diagnosis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic_app.diagnosis', verbose_name='Диагноз')),
                ('id_patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='clinic_app.patient', verbose_name='Пациент')),
            ],
        ),
        migrations.AddField(
            model_name='doctor',
            name='cabinet',
            field=models.ManyToManyField(through='clinic_app.Schedule', to='clinic_app.Cabinet'),
        ),
        migrations.AddField(
            model_name='doctor',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='doctor',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
